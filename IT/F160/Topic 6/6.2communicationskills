-- COMMUNICATION SKILLS
developers working to create applications must be able to effectively communicate with team members, clients and users in a range of different ways
there are five communication skills you need to know
> appropriate language
> verbal
> non-verbal
> questioning techniques
> written communication
you need to be aware of how each communication skill contributes to software development and when they would be used appropriately
by various job roles and in different stages of application development

-- APPROPRIATE LANGUAGE
the needs of the audience must be met by tailoring vocabulary
tone and technical detail to suit the client
team members should avoid jargon when unnecessary and be clear
concise and respectful to clients
appropriate language promotes mutal understanding between developers clients and stakeholders
and reduces misunderstandings and incorrect assumptions in requirements gathering

when gathering requirments analysts need to explain technical concepts in plain english to clients
application developers must use appropriate technical detail with other programmers during communication
in the construction phase developers should write end-user documentation suitable for non-technical audiences


-- NON-VERBAL COMMUNICATION
This includes body language facial expressions gestures posture eye contact physical space and appearance
this enhances understanding in meetings or paired programming sessions and helps convey enthusiasm agreement confusion or concern
it can build rapport and trust within teams and includes visual cues in video calls like nodding

the project manager should use a confident posture and eye contact to lead discussions in meetings
clients should also be treated with respect using handshakes or eye contact in interviews
during user testing the UX designer will observe users' facial expressions and gestures to assess app usability
when reviewing code developers will use visual cues to interpret feedback and engagement from peers


-- QUESTIONING TECHNIQUES
different question techniques will have different goals
such as probing questions being used to explore detail and clarifying questions to check understanding
questioning is vital to ensure an accurate and complete understanding of client requirements
it can identify hidden constraints or user needs and improve debugging and problem solver by asking the right technical questions

different types of questioning can be used to elicit specific responses such as:
> open ended - "what features would you like the application to have?"
> closed - "do you need the application to support offline use?"
> probing - "you mentioned reporting tools can you explain what kind of reports you need and how often?"
> leading - "wouldnt it be more efficient if the app sent notifications automatically?"
> reflective - "so you want users to log in with either their email or a social media account is that right?"
> clarifying - "when you say 'fast loading' do you mean under two seconds for each page?"
> multiple choice - "which platforms should the app support: android, ios, windows, or all three?"

when gathering client requirements analysts will use probing questions to clarify vague responses
in the testing stage developers will ask precise closed questions about expected app behaviour
during maintenance testers will use specific clarifying questions to diagnose user reported bugs


-- VERBAL COMMUNICATION
this related to spoken words and includes articulation tone pace but also listening skills
verbal communication can occur face to face in meetings or over calls and is an immediate two way or more interaction
when effective it speeds up clarification and problem solving supports effective collaboration and decision making
and helps quickly alsign team members on goals and progress

project managers must use clear verbal updates to track progress and communicate this to the rest of the team
developers in the construction and testing phases especially if programming in pairs must discuss code decisions in real time without ambiguity
when demonstrating updates developers must present the software clearly to non technical stakeholders


-- WRITTEN COMMUNICATION
this is communication through emails, reports, documentation, messages and comments
it requires clarity accuracy structure and professionalism
written data may be permanent so it can be referred to later and preserves important details like decisions requirments and bugs
it also supports maintainability through clear documentation and code comments

when creating code developers must write clear comments for team members to understand
in the planning phase project managers will create important documents
such as gantt charts timelines and reports which must be easily understandable to clients
QA testers will document test cases bug reports and test results to help developers make improvements to the code
